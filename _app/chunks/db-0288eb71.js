import{a4 as t,a5 as s,a6 as e}from"./vendor-dbc710f8.js";import{B as n,P as o}from"./models-64f15429.js";import{C as a}from"./consts-9fb24035.js";var l="/_app/assets/data.0d010016.db";const i={from:"inline",config:{serverMode:"full",requestChunkSize:16384,url:l}};async function r(t){let s=new Date;try{let e=await fetch(t,{method:"HEAD",headers:{Range:"bytes=0-100"}});if(200!=e.status&&206!=e.status)throw new Error(`Got ${e.status} status response`);return console.info(`DB exists at ${t} (latency ${(new Date).getTime()-s.getTime()}ms)`),t}catch(e){console.error(`Failed DB check at ${t} (latency ${(new Date).getTime()-s.getTime()}ms): ${e}`)}throw"nope"}const u=async function(){return i.config.url=await async function(){let t=[l,"/data.db",`https://${a}/data.db`],s=!0,e=0;return new Promise(((n,o)=>{for(let a of t)r(a).then((t=>{s&&(s=!1,console.info(`Using DB at ${t}`),n(t))}),(s=>{e++,e==t.length&&(console.error("All DB requests failed, using default"),n(l))}))}))}(),(await t.exports.createDbWorker([i],s,e)).db}();const c=async function(){const t=await u;if(null==t)return new Map;const s=await t.exec("SELECT id, prefix FROM url_prefixes");let e=new Map;for(let n of s[0].values)e[n[0]]=n[1];return e}();async function f(t){return(await p).get(t)||null}const p=async function(){const t=await u;if(null==t)return new Map;const s=await t.exec("SELECT id, name, title, description, posts FROM blogs ORDER BY name");let e=new Map;for(let o of s[0].values)e.set(o[1],new n(o[0],o[1],o[2],o[3],o[4]));return e}();async function d(){let t=0;for(let s of(await p).values())t+=s.posts;return t}const g="posts.id, posts.blog_id, blogs.name, posts.time, posts.title, posts.content, posts.url_prefix_id, posts.url_suffixes, posts.notes, posts.type, posts.tags, posts.reblog_id, reblog_names.name",b=function(t){let s=[];t[7]&&(s=t[7].split(","));let e=[];return t[10]&&(e=t[10].split(",")),new o(t[0],t[1],t[2],new Date(1e3*t[3]),t[4],t[5],t[6],s,t[8],t[9],e,t[11],t[12])};async function E(t,s){const e=await u;if(null==e)return[];const n=await e.exec(t,s);let o=[];if(n.length>0)for(let a of n[0].values)o.push(await b(a));return o}async function w(t,s,e){return await E(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.seek_id >= (SELECT seek + ? FROM blogs WHERE blogs.id = ?) ORDER BY posts.seek_id LIMIT ?`,[s,t,e])}async function m(t,s){return console.log(`offset ${t} limit ${s}`),await E(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.feed_id > ? ORDER BY posts.feed_id LIMIT ?`,[t,s])}async function _(t){const s=await u;if(null==s)return null;let e=[t];const n=await s.exec(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.id = ? LIMIT 1`,e);return n.length>0&&n[0].values.length>0?b(n[0].values[0]):null}async function O(){const t=await u;if(null==t)return null;const s=await t.exec("SELECT id FROM posts ORDER BY random() LIMIT 1");return s.length>0&&s[0].values.length>0?await _(s[0].values[0][0]):null}export{p as B,c as U,f as a,w as b,d as c,m as d,_ as e,O as g};
