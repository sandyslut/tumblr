import{a4 as s,a5 as t,a6 as e}from"./vendor-dbc710f8.js";import{B as n,P as o}from"./models-64f15429.js";import{C as a}from"./consts-9fb24035.js";var l="/_app/assets/data.0d010016.db";const i={from:"inline",config:{serverMode:"full",requestChunkSize:16384,url:l}};async function r(s){let t=new Date;try{let e=await fetch(s,{method:"HEAD",headers:{Range:"bytes=0-100"}});if(206!=e.status)throw new Error(`Got ${e.status} status response`);return s}catch(e){console.error(`Failed DB check at ${s}: ${e}`)}finally{console.info(`DB exists at ${s} (latency ${(new Date).getTime()-t.getTime()}ms)`)}throw"nope"}const u=async function(){return i.config.url=await async function(){let s=[l,"/data.db",`https://${a}/data.db`],t=!0,e=0;return new Promise(((n,o)=>{for(let a of s)r(a).then((s=>{t&&(t=!1,console.info(`Using DB at ${s}`),n(s))}),(t=>{e++,e==s.length&&(console.error("All DB requests failed, using default"),n(l))}))}))}(),(await s.exports.createDbWorker([i],t,e)).db}();const c=async function(){const s=await u;if(null==s)return new Map;const t=await s.exec("SELECT id, prefix FROM url_prefixes");let e=new Map;for(let n of t[0].values)e[n[0]]=n[1];return e}();async function f(s){return(await p).get(s)||null}const p=async function(){const s=await u;if(null==s)return new Map;const t=await s.exec("SELECT id, name, title, description, posts FROM blogs ORDER BY name");let e=new Map;for(let o of t[0].values)e.set(o[1],new n(o[0],o[1],o[2],o[3],o[4]));return e}();async function d(){let s=0;for(let t of(await p).values())s+=t.posts;return s}const g="posts.id, posts.blog_id, blogs.name, posts.time, posts.title, posts.content, posts.url_prefix_id, posts.url_suffixes, posts.notes, posts.type, posts.tags, posts.reblog_id, reblog_names.name",b=function(s){let t=[];s[7]&&(t=s[7].split(","));let e=[];return s[10]&&(e=s[10].split(",")),new o(s[0],s[1],s[2],new Date(1e3*s[3]),s[4],s[5],s[6],t,s[8],s[9],e,s[11],s[12])};async function E(s,t){const e=await u;if(null==e)return[];const n=await e.exec(s,t);let o=[];if(n.length>0)for(let a of n[0].values)o.push(await b(a));return o}async function w(s,t,e){return await E(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.seek_id >= (SELECT seek + ? FROM blogs WHERE blogs.id = ?) ORDER BY posts.seek_id LIMIT ?`,[t,s,e])}async function m(s,t){return console.log(`offset ${s} limit ${t}`),await E(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.feed_id > ? ORDER BY posts.feed_id LIMIT ?`,[s,t])}async function _(s){const t=await u;if(null==t)return null;let e=[s];const n=await t.exec(`SELECT ${g} FROM posts LEFT JOIN reblog_names ON posts.reblog_id = reblog_names.id LEFT JOIN blogs ON posts.blog_id = blogs.id WHERE posts.id = ? LIMIT 1`,e);return n.length>0&&n[0].values.length>0?b(n[0].values[0]):null}async function O(){const s=await u;if(null==s)return null;const t=await s.exec("SELECT id FROM posts ORDER BY random() LIMIT 1");return t.length>0&&t[0].values.length>0?await _(t[0].values[0][0]):null}export{p as B,c as U,f as a,w as b,d as c,m as d,_ as e,O as g};
